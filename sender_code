// This is the code for the sender module
// responsible for the Menu and Sending of messages to the receiver.

#include <Wire.h>      // Required for I2C communication (used by OLED)
#include <U8g2lib.h>   // Required for controlling the OLED display
#include <SPI.h>       // Required for SPI communication (used by LoRa)
#include <LoRa.h>      // Required for LoRa communication

// --- OLED Definitions ---
// Define the OLED reset pin based on your pinout diagram (GPIO16)
const int OLED_RESET_PIN = 16;

// Define the I2C pins for OLED based on your pinout diagram (GPIO4 and GPIO15)
const int OLED_SDA_PIN = 4;
const int OLED_SCL_PIN = 15;

// Initialize the U8g2 library for a 128x64 OLED (adjust if yours is different)
U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, /* reset=*/ U8X8_PIN_NONE, /* clock=*/ OLED_SCL_PIN, /* data=*/ OLED_SDA_PIN);
// ------------------------

// --- LoRa Definitions ---
// Define LoRa pins (adjust these based on your specific LoRa module and ESP32 wiring)
const int LORA_CS = 18;   // Chip Select pin (Example pins - VERIFY YOUR WIRING)
const int LORA_RST = 14;  // Reset pin (Example pins - VERIFY YOUR WIRING)
const int LORA_IRQ = 26;  // Interrupt pin (DIO0) (Example pins - VERIFY YOUR WIRING)

const long LORA_FREQUENCY = 915E6; // LoRa frequency (e.g., 915 MHz for Philippines)
// ------------------------

// --- Button Definitions ---
// Define the pins for the three menu buttons
const int BUTTON_UP_PIN = 32;    // GPIO32 for the "Up" button
const int BUTTON_DOWN_PIN = 33;  // GPIO33 for the "Down" button
const int BUTTON_ENTER_PIN = 0;  // GPIO0 for the "Enter" button (onboard user button)

// Define the pin for the new OLED toggle button
const int BUTTON_OLED_TOGGLE_PIN = 13; // GPIO13 for the OLED toggle button
// -------------------------

// --- Button State Variables for Debouncing ---
// Variables for Up Button
int buttonUpState;
int lastButtonUpState = HIGH;
long lastButtonUpDebounceTime = 0;

// Variables for Down Button
int buttonDownState;
int lastButtonDownState = HIGH;
long lastButtonDownDebounceTime = 0;

// Variables for Enter Button
int buttonEnterState;
int lastButtonEnterState = HIGH;
long lastButtonEnterDebounceTime = 0;

// Variables for OLED Toggle Button
int buttonOledToggleState;
int lastButtonOledToggleState = HIGH;
long lastButtonOledToggleDebounceTime = 0;

long debounceDelay = 50;     // the debounce time; increase if necessary (milliseconds)
// ---------------------------------------------

// --- Menu Variables ---
const char* menuItems[] = {
  "TULONG!",
  "Wala kuryente/signal",
  "Kailangan pagkain/tubig",
  "Kailangan sundo",
  "Walang matuluyan",
  "Lubog sa baha"
};
const int numMenuItems = sizeof(menuItems) / sizeof(menuItems[0]); // Calculate number of items

int selectedMenuItem = 0; // Index of the currently selected menu item
int menuScrollOffset = 0; // Index of the first menu item visible on screen
int lineHeight = 0;       // Height of a single line of text (calculated in setup)
int maxVisibleLines = 0;  // Maximum number of menu items that can fit on the screen
// ----------------------

// --- OLED State Variable ---
bool oledIsOn = true; // Track the current state of the OLED (starts ON)
// ---------------------------

void setup() {
  // Initialize Serial communication for debugging output
  Serial.begin(115200);
  Serial.println("ESP32 LoRa Menu Sender Sketch (with OLED Toggle)");

  // --- Initialize OLED ---
  pinMode(OLED_RESET_PIN, OUTPUT);
  digitalWrite(OLED_RESET_PIN, LOW);
  delay(100);
  digitalWrite(OLED_RESET_PIN, HIGH);
  delay(100);

  Wire.begin(OLED_SDA_PIN, OLED_SCL_PIN);

  if (!u8g2.begin()) {
    Serial.println("U8g2 initialization failed");
    // while (1); // Uncomment to halt if OLED is critical
  } else {
    Serial.println("OLED initialized");
    u8g2.setFont(u8g_font_ncenB08); // Set a font for the OLED display
    // Calculate line height and max visible lines based on the chosen font
    lineHeight = u8g2.getFontAscent() - u8g2.getFontDescent() + 2; // Ascent - Descent + spacing
    maxVisibleLines = 64 / lineHeight; // OLED height is 64 pixels

    u8g2.clearBuffer();
    u8g2.drawStr(0, 15, "OLED Ready");
    u8g2.sendBuffer();
    delay(1000);
  }
  // -------------------------

  // --- Initialize Button pins ---
  // Configure each button pin as an input with internal pull-up
  pinMode(BUTTON_UP_PIN, INPUT_PULLUP);
  pinMode(BUTTON_DOWN_PIN, INPUT_PULLUP);
  pinMode(BUTTON_ENTER_PIN, INPUT_PULLUP); // GPIO0 for the onboard button
  pinMode(BUTTON_OLED_TOGGLE_PIN, INPUT_PULLUP); // Configure the new OLED toggle button pin
  // -----------------------------

  // --- Initialize LoRa ---
  SPI.begin(); // Initialize SPI bus
  LoRa.setPins(LORA_CS, LORA_RST, LORA_IRQ); // Set LoRa pins

  if (!LoRa.begin(LORA_FREQUENCY)) {
    Serial.println("Starting LoRa failed!");
    u8g2.clearBuffer();
    u8g2.drawStr(0, 15, "LoRa Init");
    u8g2.drawStr(0, 30, "Failed!");
    u8g2.sendBuffer();
    // while (1); // Uncomment to halt if LoRa is critical
    return; // Exit setup, loop will run but LoRa won't be active
  }
  Serial.println("LoRa Initialized");
  u8g2.clearBuffer();
  u8g2.drawStr(0, 15, "LoRa Ready");
  u8g2.drawStr(0, 30, "Menu Active");
  u8g2.sendBuffer();
  delay(1000);
  // -------------------------
}

void loop() {
  // Read the current state of each button
  int readingUp = digitalRead(BUTTON_UP_PIN);
  int readingDown = digitalRead(BUTTON_DOWN_PIN);
  int readingEnter = digitalRead(BUTTON_ENTER_PIN);
  int readingOledToggle = digitalRead(BUTTON_OLED_TOGGLE_PIN); // Read the new button

  // --- Debouncing and State Check for Up Button ---
  if (readingUp != lastButtonUpState) {
    lastButtonUpDebounceTime = millis();
  }
  if ((millis() - lastButtonUpDebounceTime) > debounceDelay) {
    if (readingUp != buttonUpState) {
      buttonUpState = readingUp;
      if (buttonUpState == LOW) { // Up Button is pressed
        Serial.println("Up Button Pushed!");
        // Only navigate menu if OLED is ON
        if (oledIsOn) {
            // Move selection up, wrap around if at the top
            selectedMenuItem--;
            if (selectedMenuItem < 0) {
              selectedMenuItem = numMenuItems - 1;
            }
            // Adjust scroll offset if the selected item is now off-screen above
            if (selectedMenuItem < menuScrollOffset) {
                menuScrollOffset = selectedMenuItem;
            }
        }
      }
    }
  }
  lastButtonUpState = readingUp;
  // -----------------------------------------------

  // --- Debouncing and State Check for Down Button ---
  if (readingDown != lastButtonDownState) {
    lastButtonDownDebounceTime = millis();
  }
  if ((millis() - lastButtonDownDebounceTime) > debounceDelay) {
    if (readingDown != buttonDownState) {
      buttonDownState = readingDown;
      if (buttonDownState == LOW) { // Down Button is pressed
        Serial.println("Down Button Pushed!");
        // Only navigate menu if OLED is ON
        if (oledIsOn) {
            // Move selection down, wrap around if at the bottom
            selectedMenuItem++;
            if (selectedMenuItem >= numMenuItems) {
              selectedMenuItem = 0;
            }
            // Adjust scroll offset if the selected item is now off-screen below
             if (selectedMenuItem >= menuScrollOffset + maxVisibleLines) {
                 menuScrollOffset = selectedMenuItem - maxVisibleLines + 1;
             }
        }
      }
    }
  }
  lastButtonDownState = readingDown;
  // -----------------------------------------------

  // --- Debouncing and State Check for Enter Button ---
  if (readingEnter != lastButtonEnterState) {
    lastButtonEnterDebounceTime = millis();
  }
  if ((millis() - lastButtonEnterDebounceTime) > debounceDelay) {
    if (readingEnter != buttonEnterState) {
      buttonEnterState = readingEnter;
      if (buttonEnterState == LOW) { // Enter Button is pressed
        Serial.print("Enter Button Pushed! Selected: ");
        Serial.println(menuItems[selectedMenuItem]);

        // Only perform action if OLED is ON
        if (oledIsOn) {
            // --- Send LoRa Message Based on Selected Menu Item ---
            u8g2.clearBuffer(); // Clear for action feedback
            u8g2.setFont(u8g_font_ncenB08); // Set font for feedback

            String messageToSend = ""; // String to hold the message

            switch (selectedMenuItem) {
              case 0: // "TULONG!"
                messageToSend = "TULONG!";
                u8g2.drawStr(0, 30, "Sending TULONG!");
                Serial.println("Action: Sending TULONG!");
                break;
              case 1: // "Wala kuryente/signal"
                messageToSend = "Wala kuryente/signal";
                u8g2.drawStr(0, 30, "Sending Wala kuryente/signal");
                Serial.println("Action: Sending Wala kuryente/signal");
                break;
              case 2: // "Kailangan pagkain/tubig"
                messageToSend = "Kailangan pagkain/tubig";
                u8g2.drawStr(0, 30, "Sending Kailangan pagkain/tubig");
                Serial.println("Action: Sending Kailangan pagkain/tubig");
                break;
              case 3: // "Kailangan sundo"
                messageToSend = "Kailangan sundo";
                u8g2.drawStr(0, 30, "Sending Kailangan sundo");
                Serial.println("Action: Sending Kailangan sundo");
                break;
              case 4: // "Walang matuluyan"
                messageToSend = "Walang matuluyan";
                u8g2.drawStr(0, 30, "Sending Walang matuluyan");
                Serial.println("Action: Sending Walang matuluyan");
                break;
               case 5: // "Lubog sa baha"
                messageToSend = "Lubog sa baha";
                u8g2.drawStr(0, 30, "Sending Lubog sa baha");
                Serial.println("Action: Sending Lubog sa baha");
                break;
              default: // Should not happen with the updated menuItems size
                messageToSend = "CMD:UNKNOWN";
                u8g2.drawStr(0, 30, "Sending Unknown Cmd");
                Serial.println("Action: Sending Unknown Command");
                break;
            }

            // Send the LoRa packet if a message was defined
            if (messageToSend.length() > 0) {
                LoRa.beginPacket();
                LoRa.print(messageToSend);
                LoRa.endPacket();
                Serial.println("LoRa packet sent.");
                // You could add feedback here if LoRa.endPacket() returns 0 (failure)
            }

            u8g2.sendBuffer(); // Display action feedback
            delay(1500); // Show feedback message for 1.5 seconds
            // After showing feedback, the loop will redraw the menu
            // ---------------------------------------------------
        } else {
             Serial.println("OLED is OFF, action not performed.");
        }
      }
    }
  }
  lastButtonEnterState = readingEnter;
  // -----------------------------------------------

  // --- Debouncing and State Check for OLED Toggle Button ---
  if (readingOledToggle != lastButtonOledToggleState) {
    lastButtonOledToggleDebounceTime = millis();
  }
  if ((millis() - lastButtonOledToggleDebounceTime) > debounceDelay) {
    if (readingOledToggle != buttonOledToggleState) {
      buttonOledToggleState = readingOledToggle;
      if (buttonOledToggleState == LOW) { // OLED Toggle Button is pressed
        Serial.println("OLED Toggle Button Pushed!");
        oledIsOn = !oledIsOn; // Toggle the state

        if (oledIsOn) {
            Serial.println("OLED is now ON.");
            u8g2.setPowerSave(0); // Turn OLED ON
            // Redraw the current menu state immediately
            u8g2.clearBuffer();
            u8g2.setFont(u8g_font_ncenB08); // Set the font for the menu
            int displayStart = menuScrollOffset;
            int displayEnd = min(menuScrollOffset + maxVisibleLines, numMenuItems);
            for (int i = displayStart; i < displayEnd; i++) {
                int yPos = (i - menuScrollOffset) * lineHeight + lineHeight;
                if (i == selectedMenuItem) {
                    u8g2.drawStr(0, yPos, ">");
                    u8g2.drawStr(u8g2.getStrWidth(">") + 2, yPos, menuItems[i]);
                } else {
                    u8g2.drawStr(0, yPos, menuItems[i]);
                }
            }
            u8g2.sendBuffer();
        } else {
            Serial.println("OLED is now OFF.");
            u8g2.setPowerSave(1); // Turn OLED OFF
            // Note: Turning off power save doesn't clear the buffer,
            // but the display is physically off. Clearing buffer is good practice
            // before turning it back on.
        }
      }
    }
  }
  lastButtonOledToggleState = readingOledToggle;
  // -----------------------------------------------


  // --- Display the Menu on the OLED (only if OLED is ON) ---
  if (oledIsOn) {
      u8g2.clearBuffer(); // Clear the buffer before drawing the menu
      u8g2.setFont(u8g_font_ncenB08); // Set the font for the menu

      // Calculate the range of menu items to display
      int displayStart = menuScrollOffset;
      int displayEnd = min(menuScrollOffset + maxVisibleLines, numMenuItems);

      for (int i = displayStart; i < displayEnd; i++) {
        // Calculate Y position for each line. Start from lineHeight to leave space at the top if needed.
        int yPos = (i - menuScrollOffset) * lineHeight + lineHeight;

        // Highlight the selected item
        if (i == selectedMenuItem) {
          u8g2.drawStr(0, yPos, ">"); // Draw a marker for the selected item
          u8g2.drawStr(u8g2.getStrWidth(">") + 2, yPos, menuItems[i]); // Draw the menu item text with offset
        } else {
          u8g2.drawStr(0, yPos, menuItems[i]); // Draw the menu item text
        }
      }
      u8g2.sendBuffer(); // Send the menu content to the OLED display
  }
  // ------------------------------------

  // A small delay can help with overall loop stability
  delay(10);
}
