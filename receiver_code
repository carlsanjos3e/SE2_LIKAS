// Code for the receiver module.

#include <Wire.h>
#include <U8g2lib.h> // Assuming you were using U8g2lib for your OLED

// Define the OLED reset pin based on your pinout diagram (GPIO16)
const int OLED_RESET_PIN = 16;

// Define the I2C pins for OLED based on your pinout diagram
const int OLED_SDA_PIN = 4;
const int OLED_SCL_PIN = 15;

// Initialize the U8g2 library for a 128x64 OLED (adjust if yours is different)
// The constructor parameters might need adjustment based on your specific OLED module
U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, /* reset=*/ U8X8_PIN_NONE, /* clock=*/ OLED_SCL_PIN, /* data=*/ OLED_SDA_PIN);

void setup() {
  Serial.begin(115200);
  Serial.println("Resetting OLED");

  // Initialize the reset pin as an output
  pinMode(OLED_RESET_PIN, OUTPUT);

  // Perform the reset sequence
  digitalWrite(OLED_RESET_PIN, LOW);  // Set reset pin low to trigger reset
  delay(100);                       // Wait for a short period
  digitalWrite(OLED_RESET_PIN, HIGH); // Release reset
  delay(100);                       // Wait for the OLED to initialize

  // Initialize the I2C bus with the correct pins
  Wire.begin(OLED_SDA_PIN, OLED_SCL_PIN);

  // Initialize the U8g2 library
  if (!u8g2.begin()) {
    Serial.println("U8g2 initialization failed");
  } else {
    Serial.println("U8g2 initialized");
    // Display a test message after reset
    u8g2.setFont(u8g_font_ncenB08);
    u8g2.clearBuffer();
    u8g2.drawStr(0, 15, "OLED Reset");
    u8g2.drawStr(0, 30, "Successful");
    u8g2.sendBuffer();
  }
}

void loop() {
  // This loop can be empty as the reset and test message are done in setup
}
